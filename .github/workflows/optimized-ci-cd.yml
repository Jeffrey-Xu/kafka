name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: jeffreyxu2025
  PRODUCER_IMAGE: jeffreyxu2025/kafka:producer
  CONSUMER_IMAGE: jeffreyxu2025/kafka:consumer

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    name: Detect Changes
    outputs:
      producer-changed: ${{ steps.changes.outputs.producer }}
      consumer-changed: ${{ steps.changes.outputs.consumer }}
      common-changed: ${{ steps.changes.outputs.common }}
      deploy-needed: ${{ steps.changes.outputs.deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Detect file changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          producer:
            - 'producer/**'
            - 'pom.xml'
          consumer:
            - 'consumer/**'
            - 'pom.xml'
          common:
            - 'common/**'
            - 'pom.xml'
          deploy:
            - 'k8s/**'
            - '.github/workflows/**'

  test:
    runs-on: ubuntu-latest
    name: Test Applications
    needs: detect-changes
    if: needs.detect-changes.outputs.producer-changed == 'true' || needs.detect-changes.outputs.consumer-changed == 'true' || needs.detect-changes.outputs.common-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: |
        echo "Running tests for changed modules..."
        if [[ "${{ needs.detect-changes.outputs.producer-changed }}" == "true" ]]; then
          echo "Testing producer module"
          # mvn test -pl producer -B
        fi
        if [[ "${{ needs.detect-changes.outputs.consumer-changed }}" == "true" ]]; then
          echo "Testing consumer module"  
          # mvn test -pl consumer -B
        fi
        echo "Tests completed (currently disabled)"

  build-producer:
    needs: [detect-changes, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.producer-changed == 'true' || needs.detect-changes.outputs.common-changed == 'true')
    name: Build Producer Image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Producer
      run: |
        echo "🏗️ Building Producer (changed files detected)"
        mvn clean install -N -DskipTests -B
        mvn install -pl common -DskipTests -B
        mvn compile package -pl producer -DskipTests -B
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: jeffreyxu2025
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push Producer image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Producer Image (optimized with cache)"
        docker buildx build \
          --platform linux/amd64 \
          -f producer/Dockerfile \
          -t jeffreyxu2025/kafka:producer-$IMAGE_TAG \
          -t jeffreyxu2025/kafka:producer-latest \
          --push \
          .
        echo "✅ Producer image build completed"

  build-consumer:
    needs: [detect-changes, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.consumer-changed == 'true' || needs.detect-changes.outputs.common-changed == 'true')
    name: Build Consumer Image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Consumer
      run: |
        echo "🏗️ Building Consumer (changed files detected)"
        mvn clean install -N -DskipTests -B
        mvn install -pl common -DskipTests -B
        mvn compile package -pl consumer -DskipTests -B
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: jeffreyxu2025
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push Consumer image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Consumer Image (optimized with cache)"
        docker buildx build \
          --platform linux/amd64 \
          -f consumer/Dockerfile \
          -t jeffreyxu2025/kafka:consumer-$IMAGE_TAG \
          -t jeffreyxu2025/kafka:consumer-latest \
          --push \
          .
        echo "✅ Consumer image build completed"

  deploy:
    needs: [detect-changes, build-producer, build-consumer]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && (needs.build-producer.result == 'success' || needs.build-consumer.result == 'success' || needs.build-producer.result == 'skipped' || needs.build-consumer.result == 'skipped')
    name: Deploy to Kubernetes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Kubernetes access
      run: |
        echo "Setting up Kubernetes access..."
        mkdir -p ~/.kube
        cat > ~/.kube/config << 'EOF'
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            server: https://master01.ciscloudlab.link:6443
            insecure-skip-tls-verify: true
          name: kubernetes
        contexts:
        - context:
            cluster: kubernetes
            namespace: kafka-demo
            user: github-actions-deployer
          name: github-actions-deployer@kubernetes
        current-context: github-actions-deployer@kubernetes
        users:
        - name: github-actions-deployer
          user:
            token: TOKEN_PLACEHOLDER
        EOF
        sed -i "s/TOKEN_PLACEHOLDER/${{ secrets.K8S_TOKEN }}/g" ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Deploy changed components
      run: |
        echo "🚀 Deploying changed components to Kubernetes..."
        
        # Deploy Producer if it was built
        if [[ "${{ needs.build-producer.result }}" == "success" ]]; then
          echo "📦 Deploying updated Producer..."
          kubectl patch deployment spring-kafka-producer -n kafka-demo -p='{"spec":{"template":{"metadata":{"annotations":{"date":"'$(date +'%s')'"}}}}}'
          kubectl rollout status deployment/spring-kafka-producer -n kafka-demo --timeout=300s
          echo "✅ Producer deployment completed"
        else
          echo "⏭️ Producer unchanged, skipping deployment"
        fi
        
        # Deploy Consumer if it was built  
        if [[ "${{ needs.build-consumer.result }}" == "success" ]]; then
          echo "📦 Deploying updated Consumer..."
          kubectl patch deployment spring-kafka-consumer -n kafka-demo -p='{"spec":{"template":{"metadata":{"annotations":{"date":"'$(date +'%s')'"}}}}}'
          kubectl rollout status deployment/spring-kafka-consumer -n kafka-demo --timeout=300s
          echo "✅ Consumer deployment completed"
        else
          echo "⏭️ Consumer unchanged, skipping deployment"
        fi
        
    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment status..."
        echo "=== Pods ==="
        kubectl get pods -n kafka-demo
        echo "=== Services ==="
        kubectl get services -n kafka-demo
        echo "=== Deployments ==="
        kubectl get deployments -n kafka-demo
        
        echo "✅ Deployment verification completed"

  notify:
    needs: [detect-changes, build-producer, build-consumer, deploy]
    runs-on: ubuntu-latest
    if: always()
    name: Notify Results
    
    steps:
    - name: Notify optimization results
      run: |
        echo "📊 OPTIMIZED CI/CD PIPELINE RESULTS"
        echo "=================================="
        echo "🔍 Change Detection:"
        echo "   Producer changed: ${{ needs.detect-changes.outputs.producer-changed }}"
        echo "   Consumer changed: ${{ needs.detect-changes.outputs.consumer-changed }}"
        echo "   Common changed: ${{ needs.detect-changes.outputs.common-changed }}"
        echo ""
        echo "🏗️ Build Results:"
        echo "   Producer build: ${{ needs.build-producer.result }}"
        echo "   Consumer build: ${{ needs.build-consumer.result }}"
        echo ""
        echo "🚀 Deployment: ${{ needs.deploy.result }}"
        echo ""
        if [[ "${{ needs.build-producer.result }}" == "skipped" ]]; then
          echo "⚡ Producer build SKIPPED - no changes detected!"
        fi
        if [[ "${{ needs.build-consumer.result }}" == "skipped" ]]; then
          echo "⚡ Consumer build SKIPPED - no changes detected!"
        fi
        echo "✅ Optimized pipeline completed successfully!"
