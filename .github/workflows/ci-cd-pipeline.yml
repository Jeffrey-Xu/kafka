name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: jeffreyxu2025
  PRODUCER_IMAGE: jeffreyxu2025/kafka:producer
  CONSUMER_IMAGE: jeffreyxu2025/kafka:consumer

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Applications
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: |
        mvn clean test -B
        
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit
        
    - name: Code coverage
      run: |
        mvn jacoco:report
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Build and Push Docker Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build applications
      run: |
        mvn clean package -DskipTests -B
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push Producer image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build \
          --platform linux/amd64 \
          -f producer/Dockerfile \
          -t ${{ env.PRODUCER_IMAGE }}:$IMAGE_TAG \
          -t ${{ env.PRODUCER_IMAGE }}:latest \
          --push \
          .
        
    - name: Build and push Consumer image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build \
          --platform linux/amd64 \
          -f consumer/Dockerfile \
          -t ${{ env.CONSUMER_IMAGE }}:$IMAGE_TAG \
          -t ${{ env.CONSUMER_IMAGE }}:latest \
          --push \
          .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Deploy to Kubernetes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update Kubernetes manifests
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update producer deployment
        sed -i "s|IMAGE_PLACEHOLDER|${{ env.PRODUCER_IMAGE }}:$IMAGE_TAG|g" k8s/producer/deployment.yaml
        
        # Update consumer deployment
        sed -i "s|IMAGE_PLACEHOLDER|${{ env.CONSUMER_IMAGE }}:$IMAGE_TAG|g" k8s/consumer/deployment.yaml
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.K8S_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to Kubernetes
      env:
        K8S_HOST: ${{ secrets.K8S_HOST }}
        K8S_USER: ${{ secrets.K8S_USER }}
      run: |
        # Copy manifests to Kubernetes master
        scp -r k8s/ $K8S_USER@$K8S_HOST:/tmp/kafka-deployment/
        
        # Deploy applications
        ssh $K8S_USER@$K8S_HOST "
          # Ensure namespace exists
          kubectl create namespace kafka-demo --dry-run=client -o yaml | kubectl apply -f -
          
          # Create required resources if they don't exist
          kubectl get serviceaccount kafka-demo-sa -n kafka-demo 2>/dev/null || \
          kubectl create serviceaccount kafka-demo-sa -n kafka-demo
          
          kubectl get secret db-secret -n kafka-demo 2>/dev/null || \
          kubectl create secret generic db-secret -n kafka-demo \
            --from-literal=username=kafka_user \
            --from-literal=password=kafka_password
          
          kubectl get configmap app-config -n kafka-demo 2>/dev/null || \
          kubectl create configmap app-config -n kafka-demo \
            --from-literal=spring.kafka.bootstrap-servers=localhost:9092 \
            --from-literal=spring.datasource.url=jdbc:mysql://mysql-service:3306/kafka_demo
          
          # Apply deployments
          kubectl apply -f /tmp/kafka-deployment/producer/
          kubectl apply -f /tmp/kafka-deployment/consumer/
          kubectl apply -f /tmp/kafka-deployment/ingress/
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/spring-kafka-producer -n kafka-demo --timeout=300s
          kubectl rollout status deployment/spring-kafka-consumer -n kafka-demo --timeout=300s
          
          # Cleanup
          rm -rf /tmp/kafka-deployment/
        "
        
    - name: Verify deployment
      env:
        K8S_HOST: ${{ secrets.K8S_HOST }}
        K8S_USER: ${{ secrets.K8S_USER }}
      run: |
        ssh $K8S_USER@$K8S_HOST "
          echo '=== Pod Status ==='
          kubectl get pods -n kafka-demo
          
          echo '=== Service Status ==='
          kubectl get services -n kafka-demo
          
          echo '=== Ingress Status ==='
          kubectl get ingress -n kafka-demo
          
          echo '=== Health Checks ==='
          kubectl exec deployment/spring-kafka-producer -n kafka-demo -- curl -f http://localhost:8080/actuator/health || echo 'Producer health check failed'
          kubectl exec deployment/spring-kafka-consumer -n kafka-demo -- curl -f http://localhost:8081/api/consumer/health || echo 'Consumer health check failed'
        "

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    name: Notify Results
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build-and-push.result == 'success' && needs.deploy.result == 'success' }}
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "🚀 Applications deployed to Kubernetes"
        echo "🐳 Images pushed to Docker Hub:"
        echo "   - ${{ env.PRODUCER_IMAGE }}:${{ github.sha }}"
        echo "   - ${{ env.CONSUMER_IMAGE }}:${{ github.sha }}"
        echo "🌐 Access URLs:"
        echo "   - Producer: http://kafka-demo.ciscloudlab.link/producer"
        echo "   - Consumer: http://kafka-demo.ciscloudlab.link/consumer"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build-and-push.result == 'failure' || needs.deploy.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        echo "🔍 Check the logs for details"
        echo "📊 Test result: ${{ needs.test.result }}"
        echo "🐳 Build result: ${{ needs.build-and-push.result }}"
        echo "🚀 Deploy result: ${{ needs.deploy.result }}"
