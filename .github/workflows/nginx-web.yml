name: Nginx Web Console

on:
  push:
    branches: [ main ]
    paths:
      - 'nginx-web/**'
      - '.github/workflows/nginx-web.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'nginx-web/**'
      - '.github/workflows/nginx-web.yml'
  workflow_dispatch:

env:
  NGINX_IMAGE: jeffreyxu2025/kafka:nginx-web-console

jobs:
  build-and-deploy-nginx:
    runs-on: ubuntu-latest
    name: Build and Deploy Nginx Web Console
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: true
        
    - name: Verify Nginx Web Console files
      run: |
        echo "üåê NGINX WEB CONSOLE BUILD"
        echo "=========================="
        
        echo "üìä Git Status:"
        git status
        git log --oneline -3
        
        echo "üîç Verify nginx-web files:"
        ls -la nginx-web/
        ls -la nginx-web/html/
        ls -la nginx-web/conf/
        
        echo "üìã Check file sizes:"
        echo "Index.html size: $(wc -c < nginx-web/html/index.html) bytes"
        echo "Dashboard.html size: $(wc -c < nginx-web/html/dashboard.html) bytes"
        echo "Nginx.conf size: $(wc -c < nginx-web/conf/nginx.conf) bytes"
        echo "Dockerfile size: $(wc -c < nginx-web/Dockerfile) bytes"
        
        echo "üîç Verify HTML content references correct API URLs:"
        grep -n "kafka.ciscloudlab.link" nginx-web/html/index.html || echo "‚ö†Ô∏è  No API URL references found in index.html"
        grep -n "kafka.ciscloudlab.link" nginx-web/html/dashboard.html || echo "‚ö†Ô∏è  No API URL references found in dashboard.html"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: jeffreyxu2025
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push Nginx Web Console image
      run: |
        echo "üê≥ BUILDING NGINX WEB CONSOLE IMAGE"
        echo "=================================="
        
        # Generate unique image tag
        export IMAGE_TAG="${{ github.sha }}-$(date +%s)"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
        echo "Building nginx web console image..."
        echo "Base image: nginx:alpine"
        echo "Target image: jeffreyxu2025/kafka:nginx-web-console-$IMAGE_TAG"
        
        # Verify Dockerfile
        echo "üìã Dockerfile content:"
        cat nginx-web/Dockerfile
        
        # Build and push image
        docker buildx build \
          --no-cache \
          --pull \
          --platform linux/amd64 \
          -f nginx-web/Dockerfile \
          -t jeffreyxu2025/kafka:nginx-web-console-$IMAGE_TAG \
          -t jeffreyxu2025/kafka:nginx-web-console-latest \
          --push \
          nginx-web/
          
        echo "‚úÖ Nginx Web Console image built and pushed successfully"
        echo "New image: jeffreyxu2025/kafka:nginx-web-console-$IMAGE_TAG"
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Setup Kubernetes access
      run: |
        echo "Setting up Kubernetes access..."
        mkdir -p ~/.kube
        
        # Create kubeconfig with proper YAML formatting (same as main pipeline)
        cat > ~/.kube/config << 'EOF'
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            server: https://master01.ciscloudlab.link:6443
            insecure-skip-tls-verify: true
          name: kubernetes
        contexts:
        - context:
            cluster: kubernetes
            user: github-actions-deployer
            namespace: kafka-demo
          name: github-actions-context
        current-context: github-actions-context
        users:
        - name: github-actions-deployer
          user:
            token: TOKEN_PLACEHOLDER
        EOF
        
        # Replace token placeholder with actual token (same as main pipeline)
        sed -i "s/TOKEN_PLACEHOLDER/${{ secrets.K8S_TOKEN }}/g" ~/.kube/config
        
        chmod 600 ~/.kube/config
        
        # Verify connection
        echo "Testing Kubernetes connection..."
        kubectl version --client
        kubectl get pods -n kafka-demo
        
    - name: Deploy Nginx Web Console
      run: |
        echo "üöÄ DEPLOYING NGINX WEB CONSOLE"
        echo "============================="
        
        echo "Deploying to existing kafka-demo namespace..."
        echo "Using existing nginx-web-console deployment pattern..."
        
        # Deploy Nginx Web Console with unique image tag (maintains existing deployment name)
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: nginx-web-console
          namespace: kafka-demo
          labels:
            app: nginx-web-console
            component: web-frontend
          annotations:
            date: "$(date +%s)"
            deployment.kubernetes.io/revision: "$(date +%s)"
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: nginx-web-console
          template:
            metadata:
              labels:
                app: nginx-web-console
                component: web-frontend
              annotations:
                date: "$(date +%s)"
            spec:
              containers:
              - name: nginx
                image: jeffreyxu2025/kafka:nginx-web-console-${{ env.IMAGE_TAG }}
                imagePullPolicy: Always
                ports:
                - containerPort: 8080
                  name: http
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
                livenessProbe:
                  httpGet:
                    path: /nginx-health
                    port: 8080
                  initialDelaySeconds: 10
                  periodSeconds: 30
                  timeoutSeconds: 5
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /nginx-health
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 3
                  failureThreshold: 3
                env:
                - name: NGINX_HOST
                  value: "localhost"
                - name: NGINX_PORT
                  value: "8080"
              restartPolicy: Always
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: nginx-web-console-service
          namespace: kafka-demo
          labels:
            app: nginx-web-console
        spec:
          selector:
            app: nginx-web-console
          ports:
          - name: http
            port: 80
            targetPort: 8080
            protocol: TCP
          type: ClusterIP
        EOF
        
        # Wait for deployment
        echo "‚è≥ Waiting for nginx deployment to be ready..."
        kubectl rollout status deployment/nginx-web-console -n kafka-demo --timeout=300s
        
        # Show status
        echo "‚úÖ Nginx Web Console deployment completed!"
        echo "=== Nginx Pods ==="
        kubectl get pods -n kafka-demo -l app=nginx-web-console
        echo "=== Nginx Service ==="
        kubectl get service nginx-web-console-service -n kafka-demo
        echo "=== Main Ingress (includes /web/ paths) ==="
        kubectl get ingress kafka-demo-ingress -n kafka-demo
        
        echo "üåê Nginx Web Console accessible at:"
        echo "   - Web Console: http://kafka.ciscloudlab.link/web/"
        echo "   - Dashboard: http://kafka.ciscloudlab.link/web/dashboard.html"
        
    - name: Verify deployment and test endpoints
      run: |
        echo "üîç VERIFYING DEPLOYMENT"
        echo "======================"
        
        # Wait a bit for ingress to propagate
        echo "Waiting for ingress to propagate..."
        sleep 30
        
        # Test internal service connectivity (simplified to avoid RBAC issues)
        echo "Testing internal service connectivity..."
        kubectl get service nginx-web-console-service -n kafka-demo || echo "Service check failed"
        
        # Show deployment status (only what we have permissions for)
        echo "=== Deployment Status ==="
        kubectl get deployment nginx-web-console -n kafka-demo || echo "Deployment check failed"
        kubectl get pods -l app=nginx-web-console -n kafka-demo || echo "Pod check failed"
        kubectl get service nginx-web-console-service -n kafka-demo || echo "Service check failed"
        
        # Check ingress configuration (simplified)
        echo "=== Ingress Configuration ==="
        kubectl get ingress kafka-demo-ingress -n kafka-demo || echo "Ingress check failed"
        
        echo "‚úÖ Nginx Web Console deployment verification completed!"
        echo "Note: Some verification steps may show permission warnings but deployment is successful"
        
    - name: Notify success
      run: |
        echo "üéâ NGINX WEB CONSOLE DEPLOYMENT SUCCESS"
        echo "======================================"
        echo "‚úÖ Image: jeffreyxu2025/kafka:nginx-web-console-${{ env.IMAGE_TAG }}"
        echo "‚úÖ Deployment: nginx-web-console (updated)"
        echo "‚úÖ Service: nginx-web-console-service (active)"
        echo "‚úÖ Ingress: /web path configured"
        echo ""
        echo "üåê Access URLs:"
        echo "   - Main App: http://kafka.ciscloudlab.link/web/"
        echo "   - Dashboard: http://kafka.ciscloudlab.link/web/dashboard.html"
        echo ""
        echo "üìä This deployment is independent of the main Kafka application pipeline."
        echo "üìä Changes to nginx-web/** only trigger this workflow."
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå NGINX WEB CONSOLE DEPLOYMENT FAILED"
        echo "====================================="
        echo "Check the logs above for detailed error information."
        echo "Common issues:"
        echo "- Docker Hub authentication"
        echo "- Kubernetes token permissions"
        echo "- Image build failures"
        echo "- Service connectivity issues"
